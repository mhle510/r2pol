recursive = T, full.names = T)
dsTepR = list.files(ddOluoi, pattern = '.tif',
recursive = T, full.names = T)
dsTepRas = list.files(ddOluoi, pattern = '.tif',
recursive = T, full.names = T)
dsRas = lapply(dsTepRas, raster)
dsRas[[1]]
plot(dsRas)
plot(dsRas[[1]])
library(tidyverse)
thoiGian = basename(dsTepRas) %>% str_remove('.tif')
diemkg =  diem[,c("NAME","LONG","LAT")]
# chuyen thong tin diem thanh khong gian
diemkg =  diem[,c("NAME","LONG","LAT")]
coordinates(diemkg) <- c("LONG", "LAT") #make point file into coordinates
# chuyen thong tin diem thanh khong gian
diemkg =  diem[,c("NAME","LONG","LAT")]
coordinates(diemkg) <- c("LONG", "LAT") # chuyen thanh dang khong gian
proj4string(diemkg) <- "+proj=longlat +datum=WGS84 +ellps=WGS84" # gan toa do
plot(diemkg, add = T)
# chiet xuat gia tri tu o luoi ve diem
ras2diem = sapply(dsRas, function(x) raster::extract(x,diemkg))
%>% round(3) %>% t
# chiet xuat gia tri tu o luoi ve diem
ras2diem = sapply(dsRas, function(x) raster::extract(x,diemkg)) %>%
round(3) %>% t
colnames(ras2diem) = diem$NAME
ras2diemchuan = data.frame(thoiGian = thoiGian,
ras2diem)
View(ras2diemchuan)
plot(ras2diemchuan∆°,2)
plot(ras2diemchuan[,2])
plot(ras2diemchuan[,2], type = 'l')
library(parallel)
detectCores()
slCores = 4
cl = makeCluster(slCores)
clusterExport(cl,'raster')
# doc tung o luoi (raster) vao trong R
dsRas = parlapply(cl, dsTepRas, raster)
# doc tung o luoi (raster) vao trong R
dsRas = lapply(dsTepRas, raster)
# chuyen thong tin diem thanh khong gian
diemkg =  diem[,c("NAME","LONG","LAT")]
cl = makeCluster(slCores)
clusterExport(cl,'raster')
# doc tung o luoi (raster) vao trong R
dsRas = parLapply(cl, dsTepRas, raster)
# chuyen thong tin diem thanh khong gian
diemkg =  diem[,c("NAME","LONG","LAT")]
coordinates(diemkg) <- c("LONG", "LAT") # chuyen thanh dang khong gian
proj4string(diemkg) <- "+proj=longlat +datum=WGS84 +ellps=WGS84" # gan toa do
clusterExport(cl,'diemkg')
clusterExport(cl,'extract')
# chiet xuat gia tri tu o luoi ve diem
ras2diem = paSapply(cl, dsRas, function(x) raster::extract(x,diemkg)) %>%
round(3) %>% t
# chiet xuat gia tri tu o luoi ve diem
ras2diem = parSapply(cl, dsRas, function(x) raster::extract(x,diemkg)) %>%
round(3) %>% t
# buoc 1- thiet lap duong dan
ddChinh = "C:/Users/Hung/Dropbox/RStudy/2021_CEWAFO/dao04"
setwd(ddChinh)
# buoc 2 - goi ham
source(file.path(ddChinh,'oluoi_2_diem.r'))
library(readxl)
# buoc 3 - goi cac so lieu dau vao
# duong dan diem
ddExcel = file.path(ddChinh, 'dauVao','diem','Trammua_TK_toado_chinhsua.xls')
excel_sheets(ddExcel)
# duong dan o luoi # so lieu du bao tu thang 11/2021 cua NCEP
ddOluoi = file.path(ddChinh, 'dauVao','oLuoi','NMME_NCEP','202111')
library(tictoc)
install.packages('tictoc')
# vi du- chay don nhan
tic()
# buoc 1- thiet lap duong dan
ddChinh = "C:/Users/Hung/Dropbox/RStudy/2021_CEWAFO/dao04"
setwd(ddChinh)
# buoc 2 - goi ham
source(file.path(ddChinh,'oluoi_2_diem.r'))
library(readxl)
library(tictoc)
# buoc 3 - goi cac so lieu dau vao
# duong dan diem
ddExcel = file.path(ddChinh, 'dauVao','diem','Trammua_TK_toado_chinhsua.xls')
excel_sheets(ddExcel)
# duong dan o luoi # so lieu du bao tu thang 11/2021 cua NCEP
ddOluoi = file.path(ddChinh, 'dauVao','oLuoi','NMME_NCEP','202111')
# vi du- chay don nhan
tic()
oluoi_2_diem(ddChinh = ddChinh,
ddExcel = ddExcel,
ddOluoi = ddOluoi,
tenSheet = 'TramMuaSrepok',
cachThucchay = 'don',
slCores = 4,
tenXuatcsv = 'TramMuaSrepok')
toc()
# buoc 2 - goi ham
source(file.path(ddChinh,'oluoi_2_diem.r'))
library(readxl)
library(tictoc)
# buoc 3 - goi cac so lieu dau vao
# duong dan diem
ddExcel = file.path(ddChinh, 'dauVao','diem','Trammua_TK_toado_chinhsua.xls')
excel_sheets(ddExcel)
# duong dan o luoi # so lieu du bao tu thang 11/2021 cua NCEP
ddOluoi = file.path(ddChinh, 'dauVao','oLuoi','NMME_NCEP','202111')
# vi du- chay don nhan
tic()
oluoi_2_diem(ddChinh = ddChinh,
ddExcel = ddExcel,
ddOluoi = ddOluoi,
tenSheet = 'TramMuaSrepok',
cachThucchay = 'don',
slCores = 4,
tenXuatcsv = 'TramMuaSrepok')
toc()
source("C:/Users/Hung/Dropbox/RStudy/2021_CEWAFO/dao04/0_chay_chinh_dao04.r")
cat('dang chiet xuat so lieu ve diem ... chay', slCores,  'nhan ....','\n')
slCores = 4
cat('dang chiet xuat so lieu ve diem ... chay', slCores,  'nhan ....','\n')
cl = makeCluster(slCores)
clusterExport(cl,'raster')
# doc tung o luoi (raster) vao trong R
dsRas = parLapply(cl, dsTepRas, raster)
# chuyen thong tin diem thanh khong gian
diemkg =  diem[,c("NAME","LONG","LAT")]
tenSheet = 'TramMuaSrepok'
# tao mot thu muc xuat ket qua
dir.create(file.path(ddChinh,'xuLy'), showWarnings = F)
ddxuLy = file.path(ddChinh,'xuLy')
# doc thong tin cua diem so lieu tu sheet cua Excel
diem = read_xls(ddExcel, sheet = tenSheet)
# chuyen thanh data.frame
diem = data.frame(diem)
# lay danh sach ten o Luoi (raster)
dsTepRas = list.files(ddOluoi, pattern = '.tif',
recursive = T, full.names = T)
# lay thong tin thoi gian cua tung o luoi
thoiGian = basename(dsTepRas) %>% str_remove('.tif')
cat('dang chiet xuat so lieu ve diem ... chay', slCores,  'nhan ....','\n')
cl = makeCluster(slCores)
clusterExport(cl,'raster')
# doc tung o luoi (raster) vao trong R
dsRas = parLapply(cl, dsTepRas, raster)
# chuyen thong tin diem thanh khong gian
diemkg =  diem[,c("NAME","LONG","LAT")]
coordinates(diemkg) <- c("LONG", "LAT") # chuyen thanh dang khong gian
proj4string(diemkg) <- "+proj=longlat +datum=WGS84 +ellps=WGS84" # gan toa do
clusterExport(cl,'diemkg')
clusterExport(cl,'extract')
# chiet xuat gia tri tu o luoi ve diem
ras2diem = parSapply(cl, dsRas, function(x) raster::extract(x,diemkg)) %>%
round(3) %>% t
stopCluster(cl)
# step 1- path setup
mainPath = "D:/r2ts"
setwd(mainPath)
# step 3 - load shapefile
shpPath = file.path(mainPath, 'input','shp','mk_banyen.shp')
# path to raw raster folder
rawrasPath = file.path(mainPath, 'input','rawras')
noCores = 10
flagwriteRas = TRUE
outputName = 'banyen'
# tao mot thu muc xuat ket qua
dir.create(file.path(mainPath,'proccesed'), showWarnings = F)
processedPath = file.path(mainPath,'proccesed')
# step 1- path setup
mainPath = "D:/r2pol"
setwd(mainPath)
# step 2 - package calling
source(file.path(mainPath,'luoi_2_vung.r'))
library(rgdal)
library(tictoc)
# step 3 - path load
# path to region (in shapefile format)
shpPath = file.path(mainPath, 'input','shp','mk_banyen.shp')
# path to raw raster folder
rawrasPath = file.path(mainPath, 'input','rawras')
# packages
library(rgdal)
library(raster)
library(tidyverse)
library(doParallel)
library(parallel)
# tao mot thu muc xuat ket qua
dir.create(file.path(mainPath,'proccesed'), showWarnings = F)
processedPath = file.path(mainPath,'proccesed')
# doc thong tin du lieu vung
aoishp = readOGR(shpPath)
plot(aoishp)
# read raster files (raster)
listrawRas = list.files(rawrasPath, pattern = '.tif',
recursive = T, full.names = T)
n = length(listrawRas)
basename(listrawRas)
# obtain date informaiton
date = substr(basename(listrawRas),8,15)
cat('crop raster to region','\n')
################################################################################
# Author : Manh-Hung Le, Hong Xuan Do                                      #
################################################################################                                                       #
# Updates: 14-Apr-2022                                                        #
#                                                                  #
################################################################################
## FUNCTIONS
crop_2_region_smooth = function(rawRas, rawShp){
rasCropfine = projectRaster(rawRas, res = 0.05, crs = "+init=epsg:4326",
method="ngb")
rasMaskFin = mask(rasCropfine,mask = rawShp )
rasCropFin = crop(rasMaskFin,y = rawShp )
return(rasCropFin)
}
clusterExport(cl,
c('crop_2_region_smooth','aoishp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
cl = makeCluster(slCores)
cl = makeCluster(noCores)
clusterExport(cl,
c('crop_2_region_smooth','aoishp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
rawRas = parLapply(cl, listrawRas, raster)
cropRas = parLapply(cl, rawRas,
function(x) crop_2_region_smooth(x, aoishp))
rprocessedPath = file.path(processedPath, 'ras')
stopCluster(cl)
outputName
# obtain date informaiton
dates = substr(basename(listrawRas),8,15)
ir = 1
opPath = paste(rprocessedPath,'/', outputName,'_',dates[ir],'.tif', sep = '')
opPath
plot(cropRas[[1]])
plot(cropRas[[2]])
plot(cropRas[[10]])
plot(aoi, add = T)
plot(aoishp, add = T)
cropRas[[1]]
################################################################################
# Author : Manh-Hung Le, Hong Xuan Do                                      #
################################################################################                                                       #
# Updates: 14-Apr-2022                                                        #
#                                                                  #
################################################################################
## FUNCTIONS
crop_2_region_smooth = function(rawRas, rawShp){
rasCropfine = projectRaster(rawRas, res = 0.01, crs = "+init=epsg:4326",
method="ngb")
rasMaskFin = mask(rasCropfine,mask = rawShp )
rasCropFin = crop(rasMaskFin,y = rawShp )
return(rasCropFin)
}
cat('crop raster to region','\n')
rprocessedPath = file.path(processedPath, 'ras')
cl = makeCluster(noCores)
clusterExport(cl,
c('crop_2_region_smooth','aoishp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
rawRas = parLapply(cl, listrawRas, raster)
cropRas = parLapply(cl, rawRas,
function(x) crop_2_region_smooth(x, aoishp))
parallel_calc_areal_value_weights = function(cl, croppedRas, aoiShp){
library(parallel)
library(doParallel)
library(tictoc)
tic()
clusterExport(cl, 'aoiShp')
nd = length(croppedRas)
arealVal  = parLapply(cl = cl, 1:nd,
function(ll,croppedRas){
# note that we need to explicitly declare all "external" variables used inside clusters
rawRas = croppedRas[[ll]] # read raster in this step
t = data.frame(raster::extract(rawRas, aoiShp, weights = TRUE, normalizeWeights= TRUE))
t = t[complete.cases(t),]
if(sum(t[,2]) != 1){ # check weight is equal to 1
t[,2] = t[,2]*1/(sum(t[,2]))
sum(t[,1]*t[,2])
} else {
sum(t[,1]*t[,2])
}
}, croppedRas # you need to pass these variables into the clusters
)
toc()
arealVal = unlist(arealVal)
return(arealVal)
}
################################################################################
# Author : Manh-Hung Le, Hong Xuan Do                                      #
################################################################################                                                       #
# Updates: 14-Apr-2022                                                        #
#                                                                  #
################################################################################
## FUNCTIONS
crop_2_region_smooth = function(rawRas, rawShp){
rasCropfine = projectRaster(rawRas, res = 0.1, crs = "+init=epsg:4326",
method="ngb")
rasMaskFin = mask(rasCropfine,mask = rawShp )
rasCropFin = crop(rasMaskFin,y = rawShp )
return(rasCropFin)
}
cat('crop raster to region','\n')
rprocessedPath = file.path(processedPath, 'ras')
cl = makeCluster(noCores)
clusterExport(cl,
c('crop_2_region_smooth','aoishp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
rawRas = parLapply(cl, listrawRas, raster)
cropRas = parLapply(cl, rawRas,
function(x) crop_2_region_smooth(x, aoishp))
stopCluster(cl)
plot(cropRas[[1]])
plot(cropRas[[10]])
cropRas[[1]]
cropRas[[100]]
plot(cropRas[[100]])
plot(aoishp, add = T)
################################################################################
# Author : Manh-Hung Le, Hong Xuan Do                                      #
################################################################################                                                       #
# Updates: 14-Apr-2022                                                        #
#                                                                  #
################################################################################
## FUNCTIONS
crop_2_region_smooth = function(rawRas, rawShp){
rasCropfine = projectRaster(rawRas, res = 0.05, crs = "+init=epsg:4326",
method="ngb")
rasMaskFin = mask(rasCropfine,mask = rawShp )
rasCropFin = crop(rasMaskFin,y = rawShp )
return(rasCropFin)
}
# read shapefile
aoiShp = readOGR(shpPath)
cat('crop raster to region','\n')
rprocessedPath = file.path(processedPath, 'ras')
cl = makeCluster(noCores)
clusterExport(cl,
c('crop_2_region_smooth','aoiShp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
rawRas = parLapply(cl, listrawRas, raster)
cropRas = parLapply(cl, rawRas,
function(x) crop_2_region_smooth(x, aoiShp))
################################################################################
# Author : Manh-Hung Le, Hong Xuan Do                                      #
################################################################################                                                       #
# Updates: 14-Apr-2022                                                        #
#                                                                  #
################################################################################
## FUNCTIONS
crop_2_region_smooth = function(rawRas, rawShp){
rasCropfine = projectRaster(rawRas, res = 0.05, crs = "+init=epsg:4326",
method="ngb")
rasMaskFin = mask(rasCropfine,mask = rawShp )
rasCropFin = crop(rasMaskFin,y = rawShp )
return(rasCropFin)
}
parallel_calc_areal_value_weights = function(cl, croppedRas, aoiShp){
library(parallel)
library(doParallel)
library(tictoc)
tic()
clusterExport(cl, 'aoiShp')
nd = length(croppedRas)
arealVal  = parLapply(cl = cl, 1:nd,
function(ll,croppedRas){
# note that we need to explicitly declare all "external" variables used inside clusters
rawRas = croppedRas[[ll]] # read raster in this step
t = data.frame(raster::extract(rawRas, aoiShp, weights = TRUE, normalizeWeights= TRUE))
t = t[complete.cases(t),]
if(sum(t[,2]) != 1){ # check weight is equal to 1
t[,2] = t[,2]*1/(sum(t[,2]))
sum(t[,1]*t[,2])
} else {
sum(t[,1]*t[,2])
}
}, croppedRas # you need to pass these variables into the clusters
)
toc()
arealVal = unlist(arealVal)
return(arealVal)
}
cat('crop raster to region','\n')
rprocessedPath = file.path(processedPath, 'ras')
cl = makeCluster(noCores)
clusterExport(cl,
c('crop_2_region_smooth','aoiShp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
rawRas = parLapply(cl, listrawRas, raster)
cropRas = parLapply(cl, rawRas,
function(x) crop_2_region_smooth(x, aoiShp))
stopCluster(cl)
cropRas[[1]]
for(ir in 1 : length(cropRas)){
opPath = paste(rprocessedPath,'/', outputName,'_',dates[ir],'.tif', sep = '')
writeRaster(dscatRas[[ir]], ddXuat,
format = 'GTiff', overwrite = T)
}
for(ir in 1 : length(cropRas)){
opPath = paste(rprocessedPath,'/', outputName,'_',dates[ir],'.tif', sep = '')
writeRaster(cropRas[[ir]], ddXuat,
format = 'GTiff', overwrite = T)
}
writeRaster(cropRas[[ir]], opPath,
format = 'GTiff', overwrite = T)
opPath
dir.create(file.path(processedPath, 'ras'))
rprocessedPath = file.path(processedPath, 'ras')
for(ir in 1 : length(cropRas)){
opPath = paste(rprocessedPath,'/', outputName,'_',dates[ir],'.tif', sep = '')
writeRaster(cropRas[[ir]], opPath,
format = 'GTiff', overwrite = T)
}
# obtain date informaiton
dates = substr(basename(listrawRas),8,15)
cl = makeCluster(noCores)
clusterExport(cl,
c('crop_2_region_smooth','aoiShp'),
envir=environment())
# export library raster to all cores
clusterEvalQ(cl, library("raster"))
# calculate time series using weighted area method
parallel_calc_areal_value_weights(cl, croppedRas = rawRas, aoiShp = aoiShp)
# calculate time series using weighted area method
arealVal = parallel_calc_areal_value_weights(cl, croppedRas = rawRas, aoiShp = aoiShp)
plot(arealVal)
plot(arealVal, type = 'l')
opPath = paste(processedPath, '/',outputName,'arealts.csv', sep = '')
opPath = paste(processedPath, '/',outputName,'_arealts.csv', sep = '')
write.csv(opPath, arealVal, row.names = F)
opPath = paste(processedPath, '/',outputName,'_arealts.csv', sep = '')
write.csv(opPath, arealVal, row.names = F)
opPath
write.csv( arealVal, opPath,row.names = F)
# calculate time series using weighted area method
opDat = data.frame(dates = dates,
arealVal = parallel_calc_areal_value_weights(cl, croppedRas = rawRas, aoiShp = aoiShp))
stopCluster(cl)
opPath = paste(processedPath, '/',outputName,'_arealts.csv', sep = '')
write.csv(opDat, opPath,row.names = F)
# step 1- path setup
mainPath = "D:/r2pol"
setwd(mainPath)
# step 2 - package calling
source(file.path(mainPath,'luoi_2_vung.r'))
library(rgdal)
library(tictoc)
# step 3 - path load
# path to region (in shapefile format)
shpPath = file.path(mainPath, 'input','shp','mk_banyen.shp')
# path to raw raster folder
rawrasPath = file.path(mainPath, 'input','rawras')
# step 4 - run
tic()
ras_2_shp_in_timeseries(mainPath = mainPath, # main folder path
shpPath = shpPath, # path to area of interest
rawrasPath = rawrasPath, # path to raw raster folder
noCores = 10,# number of cores to run parallel
flagwriteRas = TRUE, # option to crop raw raster to shapefile
outputName = 'banyen') # name of output
toc()
# step 2 - package calling
source(file.path(mainPath,'ras_2_shp_in_timeseries.r'))
# step 1- path setup
mainPath = "D:/r2pol"
setwd(mainPath)
# step 2 - package calling
source(file.path(mainPath,'ras_2_shp_in_timeseries.r'))
# step 2 - package calling
source(file.path(mainPath,'ras_2_shp_in_timeseries.r'))
ing
source(file.path(mainPa
# step 1- path setup
mainPath = "D:/r2pol"
setwd(mainPath)
# step 2 - package calling
source(file.path(mainPath,'ras_2_shp_in_timeseries.r'))
library(rgdal)
library(tictoc)
# step 3 - path load
# path to region (in shapefile format)
shpPath = file.path(mainPath, 'input','shp','mk_banyen.shp')
# path to raw raster folder
rawrasPath = file.path(mainPath, 'input','rawras')
# step 4 - run
tic()
ras_2_shp_in_timeseries(mainPath = mainPath, # main folder path
shpPath = shpPath, # path to area of interest
rawrasPath = rawrasPath, # path to raw raster folder
noCores = 10,# number of cores to run parallel
flagwriteRas = TRUE, # option to crop raw raster to shapefile
outputName = 'banyen') # name of output
toc()
ras_2_shp_in_timeseries(mainPath = mainPath, # main folder path
shpPath = shpPath, # path to area of interest
rawrasPath = rawrasPath, # path to raw raster folder
noCores = 10,# number of cores to run parallel
flagwriteRas = FALSE, # option to crop raw raster to shapefile
outputName = 'banyen') # name of output
